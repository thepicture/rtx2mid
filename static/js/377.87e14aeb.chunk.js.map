{"version":3,"file":"static/js/377.87e14aeb.chunk.js","mappings":"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","sources":["features/rtx2mid/config.ts","features/rtx2mid/model/rtx2rtttl.ts","features/rtx2mid/model/deltatime.ts","features/rtx2mid/model/note2hex.ts","features/rtx2mid/model/ticks.ts","features/rtx2mid/model/rtttl2mid.ts","pages/rtx2midconverter/index.tsx","shared/ui/card.tsx"],"sourcesContent":["export interface Indexable<T> {\n    [index: string]: T;\n}\n\nexport class INSTRUCTION_IDS {\n    static HEADER = 0b000;\n    static NOTE = 0b001;\n    static SCALE = 0b010;\n    static STYLE = 0b011;\n    static TEMPO = 0b100;\n    static VOLUME = 0b101;\n}\n\nexport class NoteCodes {\n    static PAUSE = -1;\n}\n\nexport const NOTE_TO_NUMBER: Indexable<number> = {\n    c: 0,\n    'c#': 1,\n    d: 2,\n    'd#': 3,\n    e: 4,\n    f: 5,\n    'f#': 6,\n    g: 7,\n    'g#': 8,\n    a: 9,\n    'a#': 10,\n    h: 11,\n    p: 0,\n};\n\nexport const BEATS_PER_MINUTE_ENCODING: Indexable<number> = {\n    '00000': 25,\n    '00001': 28,\n    '00010': 31,\n    '00011': 35,\n    '00100': 40,\n    '00101': 45,\n    '00110': 50,\n    '00111': 56,\n    '01000': 63,\n    '01001': 70,\n    '01010': 80,\n    '01011': 90,\n    '01100': 100,\n    '01101': 112,\n    '01110': 125,\n    '01111': 140,\n    10000: 160,\n    10001: 180,\n    10010: 200,\n    10011: 225,\n    10100: 250,\n    10101: 285,\n    10110: 320,\n    10111: 355,\n    11000: 400,\n    11001: 450,\n    11010: 500,\n    11011: 565,\n    11100: 635,\n    11101: 715,\n    11110: 800,\n    11111: 900,\n};\n\nexport const BINARY_TO_NOTE: Indexable<string> = {\n    '0000': 'p',\n    '0001': 'c',\n    '0010': 'c#',\n    '0011': 'd',\n    '0100': 'd#',\n    '0101': 'e',\n    '0110': 'f',\n    '0111': 'f#',\n    1000: 'g',\n    1001: 'g#',\n    1010: 'a',\n    1011: 'a#',\n    1100: 'h',\n};\n\nexport const BINARY_TO_SCALE: Indexable<number> = {\n    '00': 1,\n    '01': 2,\n    10: 3,\n    11: 4,\n};\n\nexport const BINARY_TO_DURATION: Indexable<string> = {\n    '000': '1',\n    '001': '2',\n    '010': '4',\n    '011': '8',\n    100: '16',\n    101: '32',\n};\n\nexport const BINARY_TO_NOTE_DURATION_SPECIFIER: Indexable<string> = {\n    '00': 'no special duration',\n    '01': 'dotted note',\n    10: 'double dotted note',\n    11: '2/3 length',\n};\n\nexport const hexToBytes = (hex: string) => {\n    let bytes = [];\n\n    for (let i = 0; i < hex.length; i += 2) {\n        bytes.push(parseInt(hex.substring(i, i + 2), 16));\n    }\n\n    return bytes;\n};\n\nexport const EVERY_2_DIGITS_REGEXP = /.{2}/g;\n\nexport const MICROSECONDS_PER_QUARTER_NOTE_DIVIDEND = 60_000_000;\n\nexport const MIDI_MIME_TYPE = { type: 'audio/midi' };\n","import {\n    INSTRUCTION_IDS,\n    BINARY_TO_NOTE,\n    BINARY_TO_DURATION,\n    BINARY_TO_NOTE_DURATION_SPECIFIER,\n    BINARY_TO_SCALE,\n    BEATS_PER_MINUTE_ENCODING,\n    MIDI_MIME_TYPE,\n} from '../config';\n\nconst DEFAULT_BPM = 63;\n\nexport class Rtx2Rtttl {\n    patternHeader!: string;\n    commandLength!: string;\n    ringingToneProgramming!: string;\n    sound!: string;\n    basicSongType!: string;\n    songSequenceLength!: string;\n    patternId!: string;\n    loopValue!: boolean;\n    patternSpecifier!: string;\n\n    // https://ozekisms.com/p_2216-mobile-message-type-specification-ringtone-sms.html\n    convertToRtttl(binary: string): string {\n        let offset = 0;\n\n        this.commandLength = binary.slice(offset, offset + 8);\n\n        offset += 8;\n\n        this.ringingToneProgramming = binary.slice(offset, offset + 8);\n\n        offset += 8;\n\n        this.sound = binary.slice(offset, offset + 7);\n\n        offset += 7;\n\n        this.basicSongType = binary.slice(offset, offset + 3);\n\n        if (this.basicSongType !== '001') {\n            throw new Error(\n                `expected basic song type 001, got ${this.basicSongType}`,\n            );\n        }\n\n        offset += 3;\n\n        const songTitleLength = parseInt(binary.slice(offset, offset + 4), 2);\n\n        offset += 4;\n\n        let title = binary\n            .slice(offset, offset + songTitleLength * 8)\n            .match(/.{8}/g)!\n            .map((value) => String.fromCharCode(parseInt(value, 2)))\n            .join('');\n\n        offset += songTitleLength * 8;\n\n        this.songSequenceLength = binary.slice(offset, offset + 8);\n\n        offset += 8;\n\n        this.patternHeader = binary.slice(offset, offset + 3);\n\n        offset += 3;\n\n        this.patternId = binary.slice(offset, offset + 2);\n\n        offset += 2;\n\n        this.loopValue = Boolean(parseInt(binary.slice(offset, offset + 4), 2));\n\n        offset += 4;\n\n        this.patternSpecifier = binary.slice(offset, offset + 8);\n\n        offset += 8;\n\n        let instructions = [];\n\n        let i = offset;\n\n        while (i < binary.length) {\n            if (binary.slice(i, i + 7) === '0'.repeat(7)) {\n                break;\n            }\n\n            const instructionId = parseInt(binary.slice(i, i + 3), 2);\n\n            i += 3;\n\n            if (instructionId === INSTRUCTION_IDS.NOTE) {\n                instructions.push({\n                    id: instructionId,\n                    note: BINARY_TO_NOTE[binary.slice(i, i + 4)],\n                    duration:\n                        BINARY_TO_DURATION[binary.slice(i + 4, i + 4 + 3)],\n                    durationSpecifier:\n                        BINARY_TO_NOTE_DURATION_SPECIFIER[\n                            binary.slice(i + 4 + 3, i + 4 + 3 + 2)\n                        ],\n                });\n\n                i += 9;\n            } else if (instructionId === INSTRUCTION_IDS.SCALE) {\n                instructions.push({\n                    id: instructionId,\n                    scale: BINARY_TO_SCALE[binary.slice(i, i + 2)],\n                });\n\n                i += 2;\n            } else if (instructionId === INSTRUCTION_IDS.TEMPO) {\n                instructions.push({\n                    id: instructionId,\n                    tempo: BEATS_PER_MINUTE_ENCODING[binary.slice(i, i + 5)],\n                });\n\n                i += 5;\n            } else if (instructionId === INSTRUCTION_IDS.STYLE) {\n                i += 2;\n            } else if (instructionId === INSTRUCTION_IDS.VOLUME) {\n                i += 4;\n            }\n        }\n\n        let rtttl = `${title}:d=8,o=4,b=${\n            instructions.find((a) => typeof a.tempo !== 'undefined')!.tempo ||\n            DEFAULT_BPM\n        }:`;\n\n        const notes = [];\n\n        let currentScale = 1;\n\n        for (const instruction of instructions) {\n            if (instruction.id === INSTRUCTION_IDS.NOTE) {\n                notes.push(\n                    `${instruction.duration}${instruction.note}${\n                        instruction.note === 'p' ? '' : currentScale + 3\n                    }${\n                        instruction.durationSpecifier === 'dotted note'\n                            ? '.'\n                            : ''\n                    }`,\n                );\n            } else if (instruction.id === INSTRUCTION_IDS.SCALE) {\n                currentScale = instruction.scale!;\n            }\n        }\n\n        return rtttl + notes.join(',');\n    }\n\n    digestToFile(rtttl: string) {\n        return new File(\n            [new Uint8Array(rtttl.split('').map((word) => word.charCodeAt(0)))],\n            this.generateFilename(),\n            MIDI_MIME_TYPE,\n        );\n    }\n\n    private generateFilename(): string {\n        return `rtx2rtttl_${Date.now().toString()}.rtttl`;\n    }\n}\n","export class DeltaTime {\n    // https://github.com/sergi/jsmidi/blob/master/midi.js\n    convertNumberToDeltaTime(ticks: number): number[] {\n        let buffer = ticks & 0x7f;\n\n        while ((ticks = ticks >> 7)) {\n            buffer = buffer << 8;\n            buffer |= (ticks & 0x7f) | 0x80;\n        }\n\n        const bufferList: number[] = [];\n\n        while (true) {\n            bufferList.push(buffer & 0xff);\n\n            if (buffer & 0x80) {\n                buffer = buffer >> 8;\n            } else {\n                break;\n            }\n        }\n\n        return [\n            ...new Array<number>(4 - bufferList.length).fill(0x00),\n            ...bufferList,\n        ];\n    }\n}\n","import { NoteCodes, NOTE_TO_NUMBER } from '../config';\n\nconst DEFAULT_OCTAVE_NUMBER = 4;\n\nconst DURATION_PITCH_OCTAVE_EXTRACTOR = /(\\d+)([a-z#]+)(\\d+)?/;\n\ninterface NoteComponentContainer {\n    noteCode: number;\n    duration: number;\n    velocity: number;\n    shouldUseDotNotation: boolean;\n}\n\nexport class NoteConverter {\n    convertToComponents(note: string): NoteComponentContainer {\n        const [duration, pitch, octave = DEFAULT_OCTAVE_NUMBER] =\n            this.extractNoteComponents(note);\n\n        const shouldUseDotNotation = note.includes('.');\n\n        if (this.isPause(note)) {\n            return {\n                noteCode: NoteCodes.PAUSE,\n                duration: Number(duration),\n                velocity: 0,\n                shouldUseDotNotation,\n            };\n        }\n\n        return {\n            noteCode: NOTE_TO_NUMBER[pitch] + (Number(octave) + 1) * 12,\n            duration: Number(duration),\n            velocity: 127,\n            shouldUseDotNotation,\n        };\n    }\n\n    private extractNoteComponents(note: string): string[] {\n        return note.match(DURATION_PITCH_OCTAVE_EXTRACTOR)!.slice(1);\n    }\n\n    private isPause(note: string): boolean {\n        return note.includes('p');\n    }\n}\n","import { MICROSECONDS_PER_QUARTER_NOTE_DIVIDEND } from '../config';\n\nexport class TicksConverter {\n    convertDurationToTicks(\n        bpm: number,\n        ticksPerBeat: number,\n        fractionDuration: number,\n        shouldUseDotNotation: boolean = false,\n    ): number {\n        const ticks = Math.round(\n            (MICROSECONDS_PER_QUARTER_NOTE_DIVIDEND / bpm / ticksPerBeat) *\n                (1 / fractionDuration),\n        );\n\n        if (shouldUseDotNotation) {\n            return ticks + ticks / 2;\n        } else {\n            return ticks;\n        }\n    }\n}\n","import {\n    EVERY_2_DIGITS_REGEXP,\n    hexToBytes,\n    MICROSECONDS_PER_QUARTER_NOTE_DIVIDEND,\n    MIDI_MIME_TYPE,\n} from '../config';\n\nimport { DeltaTime } from './deltatime';\nimport { NoteConverter } from './note2hex';\nimport { TicksConverter } from './ticks';\n\nconst RTTTL_BPM_REGEXP = /b=(\\d+)/;\n\nconst TICKS_PER_BEAT = 960;\nexport class Rtttl2Mid {\n    // https://www.mobilefish.com/tutorials/midi/midi_quickguide_specification.html\n    convertRtttlToMidiFile(rtttl: string): File {\n        console.log(rtttl);\n        const midiHeader = [0x4d, 0x54, 0x68, 0x64];\n        const midiHeaderLength = [0x00, 0x00, 0x00, 0x06];\n        const singleMultiChannelTrack = [0x00, 0x00];\n\n        const numberOfTracks = [0x00, 0x01];\n\n        const timeCodeBasedTime = [0x01, 0xe0];\n\n        const trackHeader = [0x4d, 0x54, 0x72, 0x6b];\n\n        const [title, options, notes] = rtttl.split(':');\n\n        const metadata = [0x00, 0xff, 0x03, title.length];\n\n        const trackName = Array.from(title).map((letter) =>\n            letter.charCodeAt(0),\n        );\n\n        const copyright = [0x00, 0xff, 0x02, 0x00];\n\n        const tempoDescriptor = [0x00, 0xff, 0x51, 0x03];\n\n        const bpm = Number(options.match(RTTTL_BPM_REGEXP)![1]);\n        const tempo = Math.floor(\n            (MICROSECONDS_PER_QUARTER_NOTE_DIVIDEND / bpm) * 4,\n        )\n            .toString(16)\n            .padStart(6, '0')\n            .match(EVERY_2_DIGITS_REGEXP)!\n            .map((v) => parseInt(v, 16));\n\n        const instrumentPick = [0x00, 0xc0, 0x50];\n        const lengthDependentMetadata = [\n            ...metadata,\n            ...trackName,\n            ...copyright,\n            ...tempoDescriptor,\n            ...[...new Array(3 - tempo.length).fill(0x00), ...tempo],\n            ...instrumentPick,\n        ];\n\n        const note2hex = new NoteConverter();\n        const deltaTime = new DeltaTime();\n        const ticksConverter = new TicksConverter();\n\n        for (const note of notes.split(',')) {\n            const { noteCode, duration, velocity, shouldUseDotNotation } =\n                note2hex.convertToComponents(note);\n\n            const ticks = ticksConverter.convertDurationToTicks(\n                bpm,\n                TICKS_PER_BEAT,\n                duration,\n                shouldUseDotNotation,\n            );\n\n            const deltaTimeDuration = deltaTime.convertNumberToDeltaTime(ticks);\n\n            lengthDependentMetadata.push(\n                ...[0x00],\n                ...[0x90, noteCode, velocity],\n                ...deltaTimeDuration,\n                ...[0x80, noteCode, 0x00],\n            );\n        }\n\n        lengthDependentMetadata.push(0x00, 0xff, 0x2f, 0x00);\n\n        const contentBytes = hexToBytes(\n            lengthDependentMetadata.length.toString(16).padStart(4, '0'),\n        );\n\n        return new File(\n            [\n                new Uint8Array([\n                    ...midiHeader,\n                    ...midiHeaderLength,\n                    ...singleMultiChannelTrack,\n                    ...numberOfTracks,\n                    ...timeCodeBasedTime,\n                    ...trackHeader,\n                    ...[\n                        ...new Array(4 - contentBytes.length).fill(0x00),\n                        ...contentBytes,\n                    ],\n                    ...lengthDependentMetadata,\n                ]),\n            ],\n            this.generateFilename(),\n            MIDI_MIME_TYPE,\n        );\n    }\n\n    private generateFilename(): string {\n        return `rtx2midi_${Date.now().toString()}.mid`;\n    }\n}\n","import React from 'react';\n\nimport { InboxOutlined } from '@ant-design/icons';\nimport { Form, Popover, Upload } from 'antd';\n\nimport { CommonCard } from 'shared/ui/card';\n\nimport { Rtx2Rtttl } from 'features/rtx2mid/model/rtx2rtttl';\nimport { Rtttl2Mid } from 'features/rtx2mid/model/rtttl2mid';\nimport { useState } from 'react';\n\nconst formItemLayout = {\n    labelCol: { span: 6 },\n    wrapperCol: { span: 14 },\n};\n\nconst Rtx2MidConverterPage: React.FC = () => {\n    const [isOpen, setIsOpen] = useState(false);\n    const [results, setResults] = useState('');\n\n    const downloadConvertedFile = (exportedMidi: File) => {\n        const anchor = document.createElement('a');\n\n        const reference = URL.createObjectURL(exportedMidi);\n\n        anchor.download = exportedMidi.name;\n        anchor.href = reference;\n        anchor.click();\n\n        requestAnimationFrame(() => URL.revokeObjectURL(reference));\n    };\n\n    const getExportedMidi = async (file: File) => {\n        const buffer = new Uint8Array(await file.arrayBuffer());\n\n        const binary = Array.from(buffer)\n            .map((int) => int.toString(2).padStart(8, '0'))\n            .join('');\n\n        const rtx2rtttl = new Rtx2Rtttl();\n        const rtttl = rtx2rtttl.convertToRtttl(binary);\n\n        const rtttl2mid = new Rtttl2Mid();\n        const exportedMidi = rtttl2mid.convertRtttlToMidiFile(rtttl);\n        return exportedMidi;\n    };\n\n    const handleConvert = async (file: File) => {\n        setIsOpen(false);\n\n        try {\n            const exportedMidi = await getExportedMidi(file);\n\n            downloadConvertedFile(exportedMidi);\n\n            setResults('Conversion successful!');\n        } catch {\n            setResults(\n                'File is neither not a .rtl nor .mid that conforms to Nokia Ringtone Format',\n            );\n        }\n        setIsOpen(true);\n    };\n\n    return (\n        <CommonCard>\n            <Popover content={results} title=\"Result\" open={isOpen}>\n                <Form\n                    name=\"convert-rtx\"\n                    {...formItemLayout}\n                    style={{ maxWidth: 600 }}>\n                    <Form.Item label=\"Convert\">\n                        <Form.Item\n                            name=\"dragger\"\n                            valuePropName=\"fileList\"\n                            noStyle\n                            getValueFromEvent={({ file }) => {\n                                handleConvert(file);\n                            }}>\n                            <Upload.Dragger\n                                name=\"files\"\n                                maxCount={1}\n                                beforeUpload={() => false}>\n                                <p className=\"ant-upload-drag-icon\">\n                                    <InboxOutlined />\n                                </p>\n                                <p className=\"ant-upload-text\">\n                                    Select a melody to convert\n                                </p>\n                                <p className=\"ant-upload-hint\">\n                                    Should be .rtl or .mid\n                                </p>\n                            </Upload.Dragger>\n                        </Form.Item>\n                    </Form.Item>\n                </Form>\n            </Popover>\n        </CommonCard>\n    );\n};\n\nexport default Rtx2MidConverterPage;\n","import { Card, Space } from 'antd';\n\nexport interface CommonCardProps {\n    children: React.ReactNode;\n}\n\nexport const CommonCard: React.FC<CommonCardProps> = ({ children }) => (\n    <Card title=\"Conversion Menu\">\n        <Space\n            direction=\"horizontal\"\n            style={{ width: '100%', justifyContent: 'center' }}>\n            {children}\n        </Space>\n    </Card>\n);\n"],"names":["INSTRUCTION_IDS","HEADER","NOTE","SCALE","STYLE","TEMPO","VOLUME","NoteCodes","PAUSE","NOTE_TO_NUMBER","c","d","e","f","g","a","h","p","BEATS_PER_MINUTE_ENCODING","BINARY_TO_NOTE","BINARY_TO_SCALE","BINARY_TO_DURATION","BINARY_TO_NOTE_DURATION_SPECIFIER","hexToBytes","hex","bytes","i","length","push","parseInt","substring","EVERY_2_DIGITS_REGEXP","MICROSECONDS_PER_QUARTER_NOTE_DIVIDEND","MIDI_MIME_TYPE","type","Rtx2Rtttl","patternHeader","commandLength","ringingToneProgramming","sound","basicSongType","songSequenceLength","patternId","loopValue","patternSpecifier","binary","offset","this","slice","Error","songTitleLength","title","match","map","value","String","fromCharCode","join","Boolean","instructions","repeat","instructionId","id","note","duration","durationSpecifier","scale","tempo","rtttl","find","notes","currentScale","instruction","File","Uint8Array","split","word","charCodeAt","generateFilename","Date","now","toString","DeltaTime","ticks","buffer","bufferList","Array","fill","DURATION_PITCH_OCTAVE_EXTRACTOR","NoteConverter","extractNoteComponents","pitch","octave","shouldUseDotNotation","includes","isPause","noteCode","Number","velocity","TicksConverter","bpm","ticksPerBeat","fractionDuration","Math","round","RTTTL_BPM_REGEXP","Rtttl2Mid","console","log","options","metadata","trackName","from","letter","floor","padStart","v","lengthDependentMetadata","note2hex","deltaTime","ticksConverter","convertToComponents","convertDurationToTicks","deltaTimeDuration","convertNumberToDeltaTime","contentBytes","formItemLayout","labelCol","span","wrapperCol","useState","isOpen","setIsOpen","results","setResults","downloadConvertedFile","exportedMidi","anchor","document","createElement","reference","URL","createObjectURL","download","name","href","click","requestAnimationFrame","revokeObjectURL","getExportedMidi","file","arrayBuffer","int","rtx2rtttl","convertToRtttl","rtttl2mid","convertRtttlToMidiFile","handleConvert","content","open","style","maxWidth","label","valuePropName","noStyle","getValueFromEvent","maxCount","beforeUpload","className","InboxOutlined","CommonCard","children","direction","width","justifyContent"],"sourceRoot":""}